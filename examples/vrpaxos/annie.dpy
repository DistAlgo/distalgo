import time
import random
from itertools import chain

NOPS = 10 # Number of operations of the state machine
operations = {i: (lambda state: (state+i,state+i)) for i in range(NOPS)}

class Replica(process):
    def setup(leaders, initial_state):
        state, slot_num = initial_state, 1
        proposals, decisions = set(), set()

    def main():
        await(False)

    def propose(p):
        #you ignore if p is already been issued
        if not some((_, p) in decisions, True):
            #find the largest available slot
            maxs = max(s for _s, _ in chain(proposals, decisions, {(0, 0)}))
            #within maximum, find smallest which is not yet been decided
            s1 = min(s for s in range(1, maxs + 1 + 1)
                     if not some((s, _) in chain(proposals, decisions), True))
            proposals.add((s1, p))
            send(Propose(s1, p), to=leaders)

    def perform(p):
        k, cid, op = p
        if some((_s, p) in decisions, (s < slot_num)):
            slot_num += 1
        else:
            #next, result = operations[op](state) # Perform the operation on state here - get result and return
            # simply increment value at a given key
            if op in state:
                state[op] += 1
            else:
                state[op] = 1
            slot_num = slot_num + 1
            send(Response(cid, state[op]), to=k)

    def recv(msg=Request(_p)):
        propose(p)

    def recv(msg=Decision(_s, _p)):
        decisions.add((s,p))
        while some((slot_num, _p1) in decisions, True):
            while some((slot_num, _p2) in decisions, (p2 != p1)):
                propose(p2)
            perform(p1)

class Acceptor(process):
    def setup():
        ballot_num = (-1, -1)   # bottom
        accepted = set()

    def main():
        await(False)

    def recv(msg=P1a(_lam, _b)):
        if b > ballot_num:
            ballot_num = b
        send(P1b(self, ballot_num, accepted), to=lam) # we are sending the entire accepted set here - something is not right

    def recv(msg=P2a(_lam, _load)):
        b, s, p = load
        if b >= ballot_num :
            ballot_num = b
            # State Reduction - we do not need to send all accepted values. Hence instead of appending, overwrite the set
            accepted.clear()
            accepted.add((b,s,p))
        send(P2b(self, ballot_num), to=lam)

class Leader(process):
    def setup(acceptors, replicas):
        ballot_num = (0, self)
        active = False
        proposals = set()
        decided = set() # Optimization: Keep track of all slots which have been decided. No need to spawn commanders here.

    def main():
        spawn(Scout, [self, acceptors, ballot_num])
        await(False)

    def recv(msg=Propose(_s, _p)):
        if not some((s, _) in proposals, True):
            proposals.add((s,p))
            if active:
                # Spwan commander only if not decided
                if not some((s, _) in decided, True):
                    spawn(Commander, [self, acceptors, replicas, (ballot_num, s, p)])

    def recv(msg=Adopted(ballot_num, _pvals)):
        proposals = circle_plus(proposals, pmax(pvals))
        for (s, p) in proposals:
            spawn(Commander, [self, acceptors, replicas, (ballot_num, s, p)])
        active = True

    def recv(msg=Preempted(_b)):
        r1, lam1 = b
        if b > ballot_num:
            active = False
            ballot_num = (r1+1, self)
            spawn(Scout, [self, acceptors, ballot_num])

    # Keep track of decisions
    def recv(msg=Decision(_s, _p)):
        decided.add((s,p))

    def circle_plus(x, y):
        return y | {(s, p) for (s, p) in x
                    if not some((s, _) in y, True)}

    def pmax(pvals):
        return {(s, p) for (b, s, p) in pvals
                if each((_b1, s, _) in pvals, (b1 <= b))}


class Commander(process):
    def setup(lam, acceptors, replicas, load):
        waitfor = set(acceptors)
        b, s, p = load
        done = False

    def main():
        send(P2a(self, (b, s, p)), to=acceptors)
        await(done)

    def recv(msg=P2b(_a, _b1)):
        if (b1 == b):
            if a in waitfor:
                waitfor.remove(a)
            if len(waitfor) < len(acceptors)/2:
                send(Decision(s, p), to=replicas)
                send(Decision(s, p), to=lam)   # let leader know whats decided
                done = True
        else:
            send(Preempted(b1), to=lam)
            done = True


class Scout(process):
    def setup(lam, acceptors, b):
        waitfor = set(acceptors)
        pvalues = set()
        done = False

    def main():
        # why sleep?
        time.sleep(random.random())
        send(P1a(self, b), to=acceptors)
        await(done)

    def recv(msg=P1b(_a, _b1, _r)):
        if b1 == b:
            pvalues |= r
            if a in waitfor:
                waitfor.remove(a)
            if len(waitfor) < len(acceptors)/2:
                send(Adopted(b, pvalues), to=lam)
                done = True
        else:
            send(Preempted(b1), to=lam)
            done = True

class Client(process):
    def setup(replicas):
        cid = 0
        results = dict()
        count = dict()

    """
    def setupClient(self, cid):
        self.cid = cid

    def sendrequest(self, req):
        send(Request((self, cid, req)), replicas)
        await(results.get(cid) != None and count.get(cid) == len(replicas))
        output("Received result %d:%d" % (cid, results[cid]))
    """
    def main():
        i = 1
        while (True):
            send(Request((self, cid, i)), to=replicas)
            await(results.get(cid) != None and count.get(cid) == len(replicas))
            output("Received result %d:%d" % (cid, results[cid]))
            cid += 1

    def recv(msg=Response(_cid, _result)):
        if results.get(cid) == None:
            results[cid] = result
            count[cid] = 1
        else:
            if results[cid] != result:
                output("Replicas out of sync at cid(%d) : %d - %d " %
                       (cid, results[cid], result))
            else:
                count[cid] += 1

def main():
    nacceptors = 8
    nreplicas = 4
    nleaders = 2
    nclients = 4
    nops = 2

    use_channel("tcp")

    acceptors = createprocs(Acceptor, nacceptors, [])
    replicas = createprocs(Replica, nreplicas)
    leaders = createprocs(Leader, nleaders, (acceptors, replicas))
    clients = createprocs(Client, nclients, (replicas,))
    setupprocs(replicas, (leaders, dict()))

    startprocs(acceptors)
    startprocs(replicas | leaders)
    startprocs(clients)
