import sys
import time
import random
from itertools import chain

NOPS = 10 # Number of operations of the state machine
operations = {i: (lambda state: (state+i,state+i)) for i in range(NOPS)}

class Replica(process):
    def setup(leaders, initial_state):
        self.state, self.slot_num = initial_state, 1
        self.proposals, self.decisions = set(), set()

    def main():
        await(received(('Done',)))
        output("Terminating..")

    def propose(p):
        #you ignore if p is already been issued
        if not some((_, _p) in decisions):
            #find the largest available slot
            maxs = max(setof(s, (s, _) in
                             chain(proposals, decisions, {(0, 0)})))
            #within maximum, find smallest which is not yet been decided
            s1 = min(setof(s, s in range(1, maxs + 1 + 1),
                           has= not some((s, _) in
                                         chain(proposals, decisions))))
            proposals.add((s1, p))
            send(('Propose', s1, p), to=leaders)

    def perform(p):
        k, cid, op = p
        if some((s, _p) in decisions, has= s < slot_num):
            slot_num += 1
        else:
            #next, result = operations[op](state) # Perform the operation on state here - get result and return
            # simply increment value at a given key
            if op in state:
                state[op] += 1
            else:
                state[op] = 1
            slot_num += 1
            send(('Response', cid, state[op]), to=k)

    def receive(msg=('Request', p)):
        propose(p)

    def receive(msg=('Decision', s, p)):
        decisions.add((s,p))
        while some((_slot_num, p1) in decisions):
            while some((_slot_num, p2) in decisions, has=(p2 != p1)):
                propose(p2)
            perform(p1)

class Acceptor(process):
    def setup():
        self.ballot_num = (-1, -1)   # bottom
        self.accepted = set()

    def main():
        await(received(('Done',)))
        output("Terminating..")

    def receive(msg=('P1a', lam, b)):
        if b > ballot_num:
            ballot_num = b
        send(('P1b', self.id, ballot_num, accepted), to=lam) # we are sending the entire accepted set here - something is not right

    def receive(msg=('P2a', lam, load)):
        b, s, p = load
        if b >= ballot_num:
            ballot_num = b
            # State Reduction - we do not need to send all accepted values. Hence instead of appending, overwrite the set
            accepted.clear()
            accepted.add((b,s,p))
        send(('P2b', self.id, ballot_num), to=lam)


class Commander(process):
    def setup(lam, acceptors, replicas, load):
        self.waitfor = set(acceptors)
        self.b, self.s, self.p = load
        self.done = False

    def main():
        send(('P2a', self.id, (b, s, p)), to=acceptors)
        await(done)

    def receive(msg=('P2b', a, b1)):
        if (b1 == b):
            if a in waitfor:
                waitfor.remove(a)
            if len(waitfor) < len(acceptors)/2:
                send(('Decision', s, p), to=replicas)
                send(('Decision', s, p), to=lam)   # let leader know whats decided
                done = True
        else:
            send(('Preempted', b1), to=lam)
            done = True


class Scout(process):
    def setup(lam, acceptors, b):
        self.waitfor = set(acceptors)
        self.pvalues = set()
        self.done = False

    def main():
        # why sleep?
        time.sleep(random.random())
        send(('P1a', self.id, b), to=acceptors)
        await(done)

    def receive(msg=('P1b', a, b1, r)):
        if b1 == b:
            pvalues |= r
            if a in waitfor:
                waitfor.remove(a)
            if len(waitfor) < len(acceptors)/2:
                send(('Adopted', b, pvalues), to=lam)
                done = True
        else:
            send(('Preempted', b1), to=lam)
            done = True

class Leader(process):
    def setup(acceptors, replicas):
        self.ballot_num = (0, self.id)
        self.active = False
        self.proposals = set()
        self.decided = set() # Optimization: Keep track of all slots which have been decided. No need to spawn commanders here.

    def main():
        s = new(Scout, [self.id, acceptors, ballot_num], daemon=True)
        start(s)
        await(received(('Done',)))
        output("Terminating..")
        exit(0)

    def receive(msg=('Propose', s, p)):
        if not some((_s, _) in proposals):
            proposals.add((s,p))
            if active:
                # Spwan commander only if not decided
                if not some((_s, _) in decided):
                    c = new(Commander, [self.id, acceptors, replicas,
                                        (ballot_num, s, p)], daemon=True)
                    start(c)

    def receive(msg=('Adopted', _ballot_num, pvals)):
        proposals = circle_plus(proposals, pmax(pvals))
        for (s, p) in proposals:
            c = new(Commander, [self.id, acceptors, replicas,
                                (ballot_num, s, p)], daemon=True)
            start(c)
        active = True

    def receive(msg=('Preempted', b)):
        r1, lam1 = b
        if b > ballot_num:
            active = False
            ballot_num = (r1+1, self.id)
            s = new(Scout, [self.id, acceptors, ballot_num], daemon=True)
            start(s)

    # Keep track of decisions
    def receive(msg=('Decision', s, p)):
        decided.add((s,p))

    def circle_plus(x, y):
        return y | setof((s, p), (s, p) in x, has= not some((s, _) in y))

    def pmax(pvals):
        return {(s, p) for (b, s, p) in pvals
                if each((b1, _s, _) in pvals, has=(b1 <= b))}


class Client(process):
    def setup(replicas, nops):
        self.cid = 0
        self.results = dict()
        self.count = dict()

    """
    def setupClient(self.id, cid):
        self.id.cid = cid

    def sendrequest(self.id, req):
        send(Request((self.id, cid, req)), replicas)
        await(results.get(cid) != None and count.get(cid) == len(replicas))
        output("Received result %d:%d" % (cid, results[cid]))
    """
    def main():
        for i in range(nops):
            send(('Request', (self.id, cid, i)), to=replicas)
            await(results.get(cid) != None and count.get(cid) == len(replicas))
            output("Received result %d:%d" % (cid, results[cid]))
            cid += 1

    def receive(msg=('Response', cid, result)):
        if results.get(cid) == None:
            results[cid] = result
            count[cid] = 1
        else:
            if results[cid] != result:
                output("Replicas out of sync at cid(%d) : %d - %d !!!!!" %
                       (cid, results[cid], result))
            else:
                count[cid] += 1

def main():
    nacceptors = int(sys.argv[1]) if len(sys.argv) > 1 else 8
    nreplicas = int(sys.argv[2]) if len(sys.argv) > 2 else 4
    nleaders = int(sys.argv[3]) if len(sys.argv) > 3 else 2
    nclients = int(sys.argv[4]) if len(sys.argv) > 4 else 4
    nops = int(sys.argv[5]) if len(sys.argv) > 5 else 2

    config(channel="fifo")

    acceptors = new(Acceptor, [], num= nacceptors)
    replicas = new(Replica, num= nreplicas)
    leaders = new(Leader, (acceptors, replicas), num= nleaders)
    clients = new(Client, (replicas, nops), num= nclients)
    setup(replicas, (leaders, dict()))

    start(acceptors)
    start(replicas | leaders)
    start(clients)
    for c in clients: c.join()
    print("Done.")
    da.send(('Done',), to=(acceptors|replicas|leaders))
