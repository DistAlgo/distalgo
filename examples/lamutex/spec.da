import sys

class P(process):
    def setup(s, nrequests): pass

    def mutex(task):
        -- request
        c = logical_clock()
        send(('request', c, self.id), to= s)
        await(each(received(('request', c2, p)),
                   has= some(received(('release', c3, p)), has= c3 > c2)
                        or (c, self.id) < (c2, p)) and
              each(p in s, has= some(received(('ack', c2, p)), has= c2 > c)))
        -- critical_section
        task()
        -- release
        send(('release', logical_clock(), self.id), to= s)

    def receive(msg=('request', _, p)):
        send(('ack', logical_clock(), self.id), to= p)

    def main():
        def task(): output('in cs')
        for i in range(nrequests):
            mutex(task)

        send(('done', self.id), to= s)
        await(each(p in s, has= received(('done', p))))
        output('terminating')

def main():
    nprocs = int(sys.argv[1]) if len(sys.argv) > 1 else 10
    nrequests = int(sys.argv[2]) if len(sys.argv) > 2 else 1

    config(channel= 'fifo', clock= 'Lamport')

    ps = new(P, num= nprocs)

    for p in ps: setup(p, (ps-{p}, nrequests))
    start(ps)

# this code includes setup and termination for serving a given number of
# requests per process.

# all labels are not needed;
# leaving a total of 10 lines for the algorithm body and message handler.
