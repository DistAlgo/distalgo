import sys

class P(process):
    def setup(ps, n, timemax):
        q = set()

    def cs(task):
        """To enter cs, enque and send request to all, then await replies from all
        """
        --start
        reqc = logical_clock()
        q.add((reqc, self))
        send(('Request', reqc), to=ps)

        --sync
        if await(each((c2, p2) in q, (reqc, self) <= (c2, p2)) and
                 each(p3 in ps, some(received(('Reply', c3), src=_p3),
                                     c3 > reqc))):
         # critical section
            task()

         # to exit cs, deque and send releases to all
            --release
            q.remove((reqc, self))
            send(('Release', reqc), to=ps)
            output("release cs")

        elif timeout(timemax):
            --release
            q.remove((reqc, self))
            send(('Release', reqc), to=ps)
            output("timed out!")

    def recv(msg=('Request', reqts), src=source):
        """When receiving requests from others, enque and reply
        """
        q.add((reqts, source))
        send(('Reply', logical_clock()), to=source)

    def recv(msg=('Release', time), src=source):
        """When receiving release from others, deque"""
        if ((time, source) in q):
          q.remove((time, source))

    def main():
        def announce():
            output("In cs!")
        --start
        for i in range(n):
            cs(announce)
        --end
        bcast(Done(), to=ps)
        await(each(p in ps, received(('Done',), src=_p)))
        output("Terminating...")


def main():
    nprocs = int(sys.argv[1]) if len(sys.argv) > 1 else 10
    nrounds = int(sys.argv[2]) if len(sys.argv) > 2 else 1
    timeout = int(sys.argv[3]) if len(sys.argv) > 3 else 10

    use_channel("tcp")
    ps = createprocs(P, nprocs)
    # setup the processes
    for p in ps: setupprocs({p}, [ps-{p}, nrounds, timeout])
    # start the processes
    startprocs(ps)
