import sys

class P(process):
    def setup(s):
        pass

    def cs(task):
        --request
        c = logical_clock()
        bcast(Request(c, self), to=s)
        await(each(rcvd(Request(_c2, _p2)),
                   (c, self) < (c2, p2) or rcvd(Release(c2, p2))) and
              each(_p3 in s, some(rcvd(Ack(_c3, p3)), c3 > c)))
        --cs
        task()
        --release
        output("Release CS!")
        bcast(Release(c, self), to=s)

    def recv(msg=Request(_, _p2)):
        send(Ack(logical_clock(), self), to=p2)

    def main():
        def anounce():
            output("In cs!")
        cs(anounce)
        bcast(Done(self), to=s)
        await(each(_p in s, len(rcvd(Done(p))) > 0))
        output("Terminating..")

def main():
    nprocs = int(sys.argv[1]) if len(sys.argv) > 1 else 10

    use_channel("tcp")
    ps = createprocs(P, nprocs)
    # setup the processes
    for p in ps: setupprocs({p}, [ps-{p}])
    # start the processes
    startprocs(ps)
