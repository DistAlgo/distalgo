import sys
class P(process):
    def setup(s, n):           # pass in set of all processes
        ownc = 0

    def cs(task):
        --request
        ownc = logical_clock()
        send(('request', ownc, self), to=s)    # send request to all processes
        await(each(p in s,
                   has=some(received(('ack', c, _p)), has=(c > ownc))))
        --cs
        task()                  # critical section
        --release
        send(('ack', logical_clock(), self),
             to=setof(p, p in s,
                      has=some(received(('request', c, _p)),
                               has=((c, p) >= (ownc, self)))))

    def recv(msg=('request', c, p)):
        if each(received(('request', _c, self)), has=((c, p) < (ownc, self))):
            send(('ack', logical_clock(), self), to=p)

    def main():
        def anounce():
            output("In cs!")
        for i in range(n):
            cs(anounce)
        send(('Done',), to=s)
        await(each(p in s, has=received(('Done',), src=_p)))
        output("Done!")

def main():
    nprocs = int(sys.argv[1]) if len(sys.argv) > 1 else 10
    nrounds = int(sys.argv[2]) if len(sys.argv) > 2 else 1

    ps = new(P, nprocs)
    # setup the processes
    for p in ps: setup({p}, (ps-{p}, nrounds))
    # start the processes
    start(ps)
