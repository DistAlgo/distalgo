from random import randint

class Coordinator(process):
    def setup(tid, cohorts):
        pass

    def main():
        --start
        bcast(Prepare(tid), to=cohorts)
        if await(each(_c in cohorts, rcvd(Vote('ready', tid, c)))):
            bcast(Commit(tid), to=cohorts)
            await(each(_c in cohorts, rcvd(Done(tid, c))))
            output('log complete record for' + str(tid))
        elif each(_c in cohorts, rcvd(Vote(_, tid, c))):
            s = {c for (c,) in rcvd(Vote('ready', tid, _c))}
            bcast(Abort(tid), to=s)
        --end
        terminate()

    def terminate():
        bcast(Done(), to=cohorts)
        output('terminating')

class Cohort(process):
    def setup(failure_rate):
        pass

    def main():
        await(rcvd(Done()))

    def recv(msg=Prepare(_tid), src=_coord):
        if prepared(tid):
            output("ready:" + str(tid))
            send(Vote('ready', tid, self), to=coord)
        else:
            output("failed:"  + str(tid))
            send(Vote('abort', tid, self), to=coord)

    def recv(msg=Commit(_tid), src=_fro):
        send(Done(tid, self), to=fro)
        commit(tid)

    def recv(msg=Abort(_tid)):
        abort(tid)

    def prepared(tid):
        return randint(0, 100) > failure_rate

    def commit(tid):
        output('commit:' + str(tid))

    def abort(tid):
        output('abort:' + str(tid))

def main():
    nproposers = 5
    nacceptors = 10
    fail_rate = 10

    use_channel("udp")

    accpts = createprocs(Cohort, nacceptors, [fail_rate])
    propsrs = createprocs(Coordinator, 1, [nproposers, accpts])

    startprocs(accpts | propsrs)

