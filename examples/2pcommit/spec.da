import sys
from random import randint

class Coordinator(process):
    def setup(tid, cohorts): pass

    def to_commit():
        send(('prepare', tid), to= cohorts)
        await(each(c in cohorts, has= some(received(('vote', _, _tid), from_= c))))
        if some(c in cohorts, has= received(('vote', 'abort', tid), from_= c)):
            s = setof(c, c in cohorts, received(('vote','ready', tid), from_=c))
            send(('abort', tid), to= s)
            abort(tid)
        if each(c in cohorts, has= received(('vote', 'ready', tid), from_= c)):
            send(('commit', tid), to= cohorts)
            await(each(c in cohorts, has= received(('done', tid), from_= c)))
            commit(tid)

    def abort(tid): output('abort:' + str(tid))
    def commit(tid): output('commit:' + str(tid))

    def main():
        to_commit()

        send(('done',), to= cohorts)
        output('terminating')

class Cohort(process):
    def setup(failure_rate): pass

    def receive(msg=('prepare', tid), from_= coord):
        if prepared(tid):
            send(('vote', 'ready', tid), to= coord)
            ready(tid)
        else:
            send(('vote', 'abort', tid), to= coord)
            abort(tid)

    def receive(msg=('abort', tid)):
        abort(tid)

    def receive(msg=('commit', tid), from_= coord):
        send(('done', tid), to= coord)
        commit(tid)

    def prepared(tid): return randint(0, 100) > failure_rate
    def ready(tid): output('ready:' + str(tid))
    def abort(tid): output('abort:' + str(tid))
    def commit(tid): output('commit:' + str(tid))

    def main():
        await(received(('done',)))

def main():
    ncohorts = int(sys.argv[1]) if len(sys.argv) > 1 else 10
    fail_rate = int(sys.argv[2]) if len(sys.argv) > 2 else 10

    cohorts = new(Cohort, (fail_rate,), num= ncohorts)
    coordinators = new(Coordinator, ('001', cohorts), num= 1)
    start(cohorts | coordinators)

# this code includes setup and termination for trying to commit a
# transaction with a given number of cohorts.
