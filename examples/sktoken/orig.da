import sys

class P(process):
    def setup(ps:set, orig_token:bool,
              nrounds:int): # other procs, and whether self holds token
        self.RN = dict((p, 0) for p in ps)        # last request number received
        # Token structure:
        self.Q = []                   # queue of pending requests
        self.LN = dict((p, 0) for p in ps) # last request number for which token was granted

    def cs(task):
        -- request
        if not haveToken():
            RN[self] += 1
            send(('request', self, RN[self]), to=ps)
            await(haveToken())

        task()                   #critical section

        LN[self] = RN[self]
        Q.extend(listof(p, p in ps, p not in Q, RN[p] == LN[p] + 1))
        if len(Q) > 0:
            p = Q.pop()
            send(('token', Q, LN), to=p)

    def receive(msg=('token', Q1, LN1)):
        Q = Q1
        LN = LN1

    def receive(msg=('request', p, n)):
        RN[p] = max((RN[p], n))
        if (haveToken() and RN[p] == LN[p] + 1):
            send(('token', Q, LN), to=p)

    def haveToken():
        return (orig_token and not some(sent(('token', _, _)))) or\
                some(received(('token', _, LN1)),
                     has=(not some(sent(('token', _, LN2)),
                                   has=(LN2[self] > LN1[self]))))

    def run():
        def anounce():
            output("In cs!")
        if haveToken():
            output("I'm lucky!")
        for i in range(nrounds):
            cs(anounce)
        send(('Done',), to=ps)
        await(each(p in ps, has= received(('Done',), from_=p)))
        output("Done!")

def main():
    nprocs = int(sys.argv[1]) if len(sys.argv) > 1 else 10
    nrounds = int(sys.argv[2]) if len(sys.argv) > 2 else 1
     # create n process
    ps = new(P, num= nprocs)

    # setup the processes
    lucky = ps.pop()

    setup(ps, (ps|{lucky}, False, nrounds))
    setup({lucky}, (ps|{lucky}, True, nrounds))
    start(ps|{lucky})
