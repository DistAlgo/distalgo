import sys
TIMEOUT = 1.5
class Proposer(process):
    def setup(acceptors, nrounds):
        self.maj = int(len(acceptors)/2) + 1
        self.propNum = (0, self.id)
        self.propVal = self.id

    def main():
        count = 0
        while count < nrounds:
            --start
            send(('Prepare', propNum), to=acceptors)
            --propose
            if await(len(setof(a, received(('Promise', _propNum, _, a)))) >= maj):
                _, pval = max(setof((votednum, votedval),
                                    received(('Promise', _propNum, (votednum, votedval), _))))
                if pval is not None:
                    propVal = pval
                send(('Propose', propNum, propVal), to=acceptors)
                if await(len(setof(a, received(('Accept', _propNum, _propVal, a)))) >= maj):
                    --end
                    output("Succeeded in proposing %r"%propVal)
                    count += 1
                    continue
                elif timeout(TIMEOUT): pass
            elif timeout(TIMEOUT): pass
            --reinit
            output("Failed ballot %s, retrying." % str(propNum))
            # Try again with a higher proposal number
            propNum = (propNum[0]+1, self.id)
        send(('Done', self.id), to=acceptors)

class Acceptor(process):
    def setup(proposers):
        self.min_propnum = (-1, self.id)

    def main():
        await(each(p in proposers, has= received(('Done', p))))

    def receive(msg=('Prepare', n), from_=source):
        if (n > max(setof(propnum, sent(('Promise', propnum, _, _))) |
                    {min_propnum})):
            send(('Promise', n,
                  max(setof((mpn, vv), sent(('Accept', mpn, vv, _))) |
                      {(min_propnum, None)}),
                  self.id), to=source)

    def receive(msg=('Propose', n, v), from_=source):
        if (n >= max(setof(propnum, sent(('Promise', propnum, _, _))) |
                     {min_propnum})):
            send(('Accept', n, v, self.id), to=source)

def main():
    nproposers = int(sys.argv[1]) if len(sys.argv) > 1 else 10
    nacceptors = int(sys.argv[2]) if len(sys.argv) > 2 else 25
    nrounds = int(sys.argv[3]) if len(sys.argv) > 3 else 1

    acceptors = new(Acceptor, num= nacceptors)
    proposers = new(Proposer, [acceptors, nrounds], num= nproposers)
    setup(acceptors, [proposers])
    start(acceptors)
    start(proposers)
