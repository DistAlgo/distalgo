import sys
TIMEOUT = 3

class Proposer(process):
    def setup(acceptors, quorumsize, f):
        propNum = (0, self)          # Current proposal(ballot) number
        propVal = self          # Own value to propose

    def main():
        while True:
            --prepare
            send(('Prepare', propNum, self), to=acceptors)
            if await(len({a for a in
                          received(('Promise', _propNum, _, _, a))}) > quorumsize):
                --propose
                voted = max({(n, v)
                             for (n, v) in
                             received(('Promise', _propNum, n, v, _))
                             if len({a for a in received(('Promise', _propNum,
                                                          _n, _v, a))}) > f} |
                            {((-1, self), propVal)})[1]

                send(('OneC', propNum, voted, self), to=acceptors)
                if await(len({a for a in received(('TwoAv', _propNum, _voted, a))}) > quorumsize):
                    --end
                    output("Succeeded proposing %r" % voted)
                    work()
                    continue
                elif timeout(TIMEOUT):
                    output("Failed to Propose in time, retrying.")
            elif timeout(TIMEOUT):
                output("Failed to Prepare in time, retrying.")
            propNum = (propNum[0] + 1, self)

class Acceptor(process):
    def setup(peers, quorumsize, f):
        pass

    def main():
        while True:
            if await(some(received(('TwoAV', n, v, _)),
                          (len({a for a in received(('TwoAV', _n, _v, a))}) > quorumsize and
                           not sent(('TwoB', _n, _v))))):
                send(('TwoB', n, v), to=peers)

    def recv(msg=('Prepare', n, p)):
        if n > maxpromised():
            vn, vv = max({(vpn, vv) for _ in sent(('TwoAv', vpn, vv, self))} |
                         {((-1, self), None)})
            send(('Promise', n, vn, vv, self), to=peers)

    def recv(msg=('OneC', n, v, p)):
        if (n >= maxpromised() and islegal(n, v) and (not sent(('TwoAv', _n, _, self)))):
            send(('TwoAv', n, v, self), to=peers)

    def maxpromised():
        return max({n for n in sent(('Promise', n, _, _, _))} | {(-2, self)})

    def islegal(n, v):
        voted = {(vn, vv)
                 for (vn, vv) in received(('Promise', _n, vn, vv, _))
                 if len({a for a in received(('Promise', _n, _vn, _vv, a))}) > f}
        if voted and (max(voted)[1] is not None):
            return v == max(voted)[1]
        else:
            return True

def main():
    nproposers = int(sys.argv[1]) if len(sys.argv) > 1 else 10
    nacceptors = int(sys.argv[2]) if len(sys.argv) > 2 else 25
    f = int((nacceptors-1)/3)
    quorum = int(nacceptors/2 + f)

    acceptors = createprocs(Acceptor, nacceptors)
    proposers = createprocs(Proposer, nproposers)
    setupprocs(acceptors, ((acceptors | proposers), quorum, f))
    setupprocs(proposers, (acceptors, quorum, f))
    startprocs(acceptors)
    startprocs(proposers)
