import sys
from random import randint
controller = import_da('controller')

class Proposer(process, controller.Controllee):
    def setup(ctl, acceptors:set, timeout):
        super().setup(ctl)
        self.n = None              # proposal number
        self.majority = acceptors  # majority of acceptors; all in other papers

    def to_consent():
        n = (0, self.id) if n == None else (n[0]+1, self.id)  # pick a prop num
        send(('prepare', n), to= majority)

        if await(len(setof(a, received(('respond', _n, _), from_ =a)))
                 > len(acceptors)/2):
            v = anyof(setof(v, received(('respond', _n, (n2, v))),
                            n2==max(setof(n2, received(('respond', _n, (n2, _))))))
                      or {randint(1,100)})  # any value, pick in 1..100
            responded = setof(a, received(('respond', _n, _), from_ =a))
            send(('accept', n, v), to= responded)
            #output('### chose', n, v)

        elif timeout(timeout):
            #output('failed proposal number', n)
            pass

    @controller.run
    def run():
        while not received(('done',)):
            to_consent()

    def anyof(s):
        return next(iter(s)) if s else None

@controller.rugroup('bo_measured')
class Acceptor(process, controller.Controllee):
    def setup(ctl, learners:set):
        super().setup(ctl)

    def receive(msg= ('prepare', n), from_= p):
        if each(sent(('respond', n2, _)), has= n > n2):
            maxprop = anyof(setof((n, v), sent(('accepted', n, v)),
                               n==max(setof(n, sent(('accepted', n, _))))))
            send(('respond', n, maxprop), to =p)

    def receive(msg= ('accept', n, v)):
        if not some(sent(('respond', n2, _)), has= n2 > n):
            send(('accepted', n, v), to= learners)

    @controller.run
    def run():
        return 0

    def anyof(s):
        """return any element of set s if s is not empty or 'None' otherwise"""
        return next(iter(s)) if s else None

class Learner(process, controller.Controllee):
    def setup(ctl, acceptors:set, proposer:Proposer, timeout):
        super().setup(ctl)

    def learn():
        if await(some(received(('accepted', n, v)),
                      has= len(setof(a, received(('accepted', _n, _v), from_=a)))
                           > len(acceptors)/2)):
            output('learned', n, v)

        elif timeout(timeout):
            output('failed learning anything')

    @controller.run
    def run():
        learn()
        send(('done',), to= proposer)

def main():
    nacceptors = int(sys.argv[1]) if len(sys.argv) > 1 else 3
    nproposers = int(sys.argv[2]) if len(sys.argv) > 2 else 3
    timeout = int(sys.argv[3]) if len(sys.argv) > 3 else 1

    ctl = new(controller.Controller, num= 1)
    setup(ctl, (nacceptors + nproposers * 2, ))
    start(ctl)

    acceptors = new(Acceptor, num= nacceptors)
    proposers = new(Proposer, (ctl, acceptors, timeout), num= nproposers)
    learners = new(Learner, num= nproposers)
    for a in acceptors: setup(a, (ctl, learners,))
    for p, l in zip(proposers, learners): setup(l, (ctl, acceptors, p, timeout))
    start(acceptors | proposers | learners)

# This is an executable specification of the algorithm described in
# Lamport, L. (2001).  Paxos Made Simple.  ACM SIGACT News 
# (Distributed Computing Column), 32(4):51-58, December.

# This code includes setup and termination for running repeated rounds until
# the learners all terminate after learning the consent value or timeout.
