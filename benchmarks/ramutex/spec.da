import sys
controller = import_da('controller')

class P(process, controller.Controllee):
    def setup(ctl, s, n):       # pass in set of all processes
        super().setup(ctl)
        self.ownc = 0

    def ctl_begin(): super().ctl_begin()
    def ctl_end(): super().ctl_end()

    def cs(task):
        --request
        ownc = logical_clock()
        send(('request', ownc, self.id), to=s)    # send request to all processes
        await(each(p in s,
                   has=some(received(('ack', c, p)), has=(c > ownc))))
        --cs
        task()                  # critical section
        --release
        send(('ack', logical_clock(), self.id),
             to=setof(p, p in s,
                      some(received(('request', c, p)),
                           has=((c, p) >= (ownc, self.id)))))

    def receive(msg=('request', c, p)):
        if each(received(('request', _c, self.id)), has=((c, p) < (ownc, self.id))):
            send(('ack', logical_clock(), self.id), to=p)

    def run():
        ctl_begin()

        def anounce():
            output("In cs!")
        for i in range(n):
            cs(anounce)
        send(('Done',), to=s)
        await(each(p in s, has= received(('Done',), from_=p)))
        output("Done!")

        ctl_end()

def main():
    nprocs = int(sys.argv[1]) if len(sys.argv) > 1 else 10
    nrounds = int(sys.argv[2]) if len(sys.argv) > 2 else 1
    config(clock='Lamport')

    ctl = new(controller.Controller, num= 1)
    setup(ctl, (nprocs,))
    start(ctl)

    ps = new(P, num= nprocs)
    # setup the processes
    for p in ps: setup({p}, (ctl, ps-{p}, nrounds))
    # start the processes
    start(ps)
