import sys
import time
import random
controller = import_da('controller')

BACKOFF_LIMIT = 8
NOPS = 10  # number of different operations that the state machine can do
# operation i maps a state to a pair of new state and result of i on state
def operation(i): return lambda state: (state+[i], ['result',i,'on',state])
operations = {i: operation(i) for i in range(NOPS)}

# wrong: all closures get i = NOPS - 1
# ops = {i: (lambda state: (state+[i], ['res',i]+state)) for i in range(NOPS)}

class Replica(process, controller.Controllee):
    def setup(ctl, leaders:set, initial_state):
        super().setup(ctl)
        self.state = initial_state;  self.slot_num = 1

    def serve():
      backoff = 0
      while True:
        output('### replica')
        if await(some(received(('request', p)), has=
                      each(sent(('propose', s, _p)), has=
                           some(received(('decision', _s, p2)), has= p2!=p)))):
            output('### replica 1', 'p', p)
            # find the maximum used slot
            used_s = max((setof(s, sent(('propose', s, _))) |
                          setof(s, received(('decision', s, _)))) | {0})
            output('used_s', used_s)
            # within used+1, find the smallest that is not yet used
            s = min(setof(s, s in range(1, used_s + 1 + 1), 
                             not(some(sent(('propose', _s ,_))) or
                                 some(received(('decision', _s, _))))))
            output('s', s, 'p', p)
            send(('propose', s, p), to= leaders)
        elif some(received(('decision', _slot_num, p))):
            output('### replica 2', 'p', p)
            if not some(received(('decision', s, _p)), has= s < slot_num):
                client, cmd_id, op = p
                state, result = operations[op](state)
                output('### replica 2.1', 'state', state, 'result', result)
                send(('response', cmd_id, result), to= client)
                backoff = 0
            else:
                await(False, timeout=random.randrange((1<<backoff)*10)/1000)
                if backoff < BACKOFF_LIMIT:
                    backoff += 1
            slot_num += 1
            output('slot_num', slot_num)

    @controller.run
    def run():
        serve()

class Leader(process, controller.Controllee):
  def setup(ctl, acceptors:set, replicas:set):
      super().setup(ctl)
      self.ballot = (0, self.id)  # ballot number

  def lead():
    backoff = 0
    while True:
      output('### leader')
      send(('1a', ballot), to= acceptors)
      if await(len(setof(a, received(('1b', _ballot, _), from_= a)))
               > len(acceptors)/2):
        output('### leader 1')
        
        for (s,p) in pmax(setof(t, received(('1b', _ballot, accepted)),
                                t in accepted)):
          send(('2a', ballot, s, p), to= acceptors)

        while True:
          if await(some(received(('propose', s, p)), has=
                        not some(sent(('2a', _, _s, _))))):
            output('### leader 1.1  b={}, s={}, p={}'.format(ballot, s, p))
            send(('2a', ballot, s, p), to= acceptors)
          elif some(received(('2b', _ballot, s, p)), has=
                    len(setof(a, received(('2b', _ballot, _s, _p), from_= a)))
                    > len(acceptors)/2 and
                    not sent(('decision', s, p))):  # not in DistAlgo vesion
            output('### leader 1.2  s={}, p={}'.format(s, p))
            send(('decision', s, p,), to= replicas)
            backoff = 0
          elif (some(received(('1b',b,_)), has= b > ballot) or \
                some(received(('2b',b,_,_)), has= b > ballot)):
            output('### leader 1.3')
            await(False, timeout=random.randrange((1<<backoff)*10)/1000)
            if backoff < BACKOFF_LIMIT:
                backoff += 1
            break

      elif some(received(('1b',b,_)), has= b > ballot) or \
           some(received(('2b',b,_,_)), has= b > ballot):
        output('### leader 2')
        await(False, timeout=random.randrange((1<<backoff)*10)/1000)
        if backoff < BACKOFF_LIMIT:
            backoff += 1
        pass

      ballot = (ballot[0]+1, self.id)

  def pmax(pvals):
      return setof((s, p), (b, s, p) in pvals,
                           each((b2, _s, _) in pvals, has= b2 <= b))

  @controller.run
  def run():
      lead()

class Acceptor(process, controller.Controllee):
    def setup(ctl):
        super().setup(ctl)

    def receive(msg=('1a', _), from_= leader):
        ballot = max(setof(b, received(('1a', b))) |
                     setof(b, received(('2a', b, _, _))) |
                     {(-1, -1)})
        #if ballot != ballot_num: output(ballot, '\n', ballot_num, '\n')
        #output(ballot, '\n', ballot_num, '\n')
        accepted = setof((ballot, s, p),
                         (s,p) in pmax(setof((b,s,p), received(('2a',b, s, p)))))
        #if accepted2 != accepted: output('###', accepted2,'\n', accepted,'\n')
        #output('###', accepted2, '\n', accepted, '\n')
        send(('1b', ballot, accepted), to= leader)

    def receive(msg=('2a', b, s, p), from_= leader):
        ballot = max(setof(b, received(('1a', b))) |
                     setof(b, received(('2a', b, _, _))) |
                     {(-1, -1)})
        send(('2b', ballot, s, p), to= leader)

    def pmax(pvals):
        #output('pmax', pvals)
        return setof((s, p), (b, s, p) in pvals,
                             each((b2, _s, _) in pvals, has= b2 <= b))

    @controller.run
    def run():
        await(False)

class Client(process, controller.Controllee):
    def setup(ctl, replicas:set, nops):
        super().setup(ctl)
        self.cid = 0           # command id
        self.results = dict()  # map of command id to result of command
        self.count = dict()    # map of command id to number of responses

    @controller.run
    def run():
        for i in range(nops):
            send(('request', (self.id, cid, random.randint(0, NOPS-1))),
                 to= replicas)
            await(cid in results)
            output('received result', cid, results[cid])
            cid += 1
        await(each(cid in range(nops), has= count[cid] == len(replicas)))
        output('terminating')

    def receive(msg= ('response', cid, result)):
        output('### response', cid, result)
        if cid not in results:
            results[cid] = result
        elif results[cid] != result:
            output('different result', cid, result, 'than', results[cid])
            raise RuntimeError('Desynced!!!!')
        count[cid] = 1 if cid not in count else count[cid] + 1

def main():
    config(channel= 'fifo')
    
    nacceptors = int(sys.argv[1]) if len(sys.argv) > 1 else 8
    nreplicas = int(sys.argv[2]) if len(sys.argv) > 2 else 8
    nleaders = int(sys.argv[3]) if len(sys.argv) > 3 else 2
    nclients = int(sys.argv[4]) if len(sys.argv) > 4 else 5
    nops = int(sys.argv[5]) if len(sys.argv) > 5 else 3

    ctl = new(controller.Controller, num= 1)
    nprocs = nacceptors + nreplicas + nleaders + nclients
    setup(ctl, (nprocs, nclients))
    start(ctl)

    acceptors = new(Acceptor, (ctl,), num= nacceptors)
    replicas = new(Replica, num= nreplicas)
    leaders = new(Leader, (ctl, acceptors, replicas), num= nleaders)
    initial_state = [];  setup(replicas, (ctl, leaders, initial_state))
    clients = new(Client, (ctl, replicas, nops), num= nclients)

    start(acceptors)
    start(replicas | leaders)
    start(clients)
