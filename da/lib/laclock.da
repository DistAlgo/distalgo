# Copyright (c) 2010-2016 Bo Lin
# Copyright (c) 2010-2016 Yanhong Annie Liu
# Copyright (c) 2010-2016 Stony Brook University
# Copyright (c) 2010-2016 The Research Foundation of SUNY
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

class ClockTag: pass

class LamportTimestamp(process):
    """An implementation of Lamport's logical timestamp algorithm.

    See "Leslie Lamport. 1978. Time, clocks, and the ordering of events in a
    distributed system. Commun. ACM 21, 7 (July 1978), 558-565.
    DOI=http://dx.doi.org/10.1145/359545.359563"

    """
    def setup():
        self._logical_clock = 0

    def send(message, to, channel=None, noclock=False, **rest):
        if noclock:
            # allows sending messages to processes that does not use a logical
            # clock:
            return super().send(message, to, channel, **rest)
        else:
            return super().send((ClockTag, self._logical_clock, message),
                                to, channel, **rest)

    def receive(msg=(_ClockTag, rclock, message), from_=src):
        self._logical_clock = max(self._logical_clock, rclock) + 1
        super().send(message, to=self, impersonate=src)

    def logical_time():
        """Returns the current value of the logical clock."""
        return self._logical_clock

    def incr_logical_time():
        """Increments the logical clock."""
        self._logical_clock += 1

    # Need this to avoid the compiler warning:
    def run(): pass
